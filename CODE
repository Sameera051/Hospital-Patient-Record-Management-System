CODE:
CREATING TABLES:
-- 1. Patients Table
CREATE TABLE patients (
    patient_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dob DATE,
    gender ENUM('Male', 'Female', 'Other'),
    phone VARCHAR(15) UNIQUE,
    address TEXT
);

-- 2. Doctors Table
CREATE TABLE doctors (
    doctor_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    specialization VARCHAR(100) NOT NULL,
    phone VARCHAR(15) UNIQUE,
    email VARCHAR(100) UNIQUE
);

-- 3. Appointments Table
CREATE TABLE appointments (
    appointment_id INT PRIMARY KEY AUTO_INCREMENT,
    patient_id INT NOT NULL,
    doctor_id INT NOT NULL,
    appointment_date DATETIME NOT NULL,
    status ENUM('Scheduled', 'Completed', 'Cancelled') DEFAULT 'Scheduled',
    FOREIGN KEY (patient_id) REFERENCES patients(patient_id),
    FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id)
);

-- 4. Treatments Table
CREATE TABLE treatments (
    treatment_id INT PRIMARY KEY AUTO_INCREMENT,
    patient_id INT NOT NULL,
    doctor_id INT NOT NULL,
    diagnosis TEXT NOT NULL,
    treatment_details TEXT,
    treatment_date DATE NOT NULL,
    FOREIGN KEY (patient_id) REFERENCES patients(patient_id),
    FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id)
);

-- 5. Prescriptions Table
CREATE TABLE prescriptions (
    prescription_id INT PRIMARY KEY AUTO_INCREMENT,
    treatment_id INT NOT NULL,
    medicine_name VARCHAR(100) NOT NULL,
    dosage VARCHAR(50) NOT NULL,
    duration_days INT NOT NULL,
    FOREIGN KEY (treatment_id) REFERENCES treatments(treatment_id)
);

6. Billing Table
CREATE TABLE billing (
    bill_id INT PRIMARY KEY AUTO_INCREMENT,
    patient_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_status ENUM('Paid', 'Pending') DEFAULT 'Pending',
    billing_date DATE NOT NULL,
    FOREIGN KEY (patient_id) REFERENCES patients(patient_id)
);

STEP2: INSERTING SAMPLE DATA

INSERT INTO patients (first_name, last_name, dob, gender, phone, address)
VALUES 
('John', 'Doe', '1980-05-12', 'Male', '9876543210', 'New Delhi'),
('Mary', 'Smith', '1992-10-08', 'Female', '9876501234', 'Mumbai');

INSERT INTO doctors (first_name, last_name, specialization, phone, email)
VALUES
('Alice', 'Brown', 'Cardiologist', '9000000001', 'alice@hospital.com'),
('David', 'Miller', 'Neurologist', '9000000002', 'david@hospital.com');

INSERT INTO appointments (patient_id, doctor_id, appointment_date, status)
VALUES
(1, 1, '2025-08-15 10:00:00', 'Scheduled'),
(2, 2, '2025-08-16 11:30:00', 'Scheduled');

INSERT INTO treatments (patient_id, doctor_id, diagnosis, treatment_details, treatment_date)
VALUES
(1, 1, 'Heart Disease', 'Bypass surgery scheduled', '2025-08-20');

INSERT INTO prescriptions (treatment_id, medicine_name, dosage, duration_days)
VALUES
(1, 'Aspirin', '100mg', 30);

INSERT INTO billing (patient_id, amount, payment_status, billing_date)
VALUES
(1, 50000, 'Pending', '2025-08-21');
Get all upcoming appointments for a doctor
SELECT a.appointment_id, p.first_name AS patient, a.appointment_date, a.status
FROM appointments a
JOIN patients p ON a.patient_id = p.patient_id
WHERE a.doctor_id = 1 AND a.status = 'Scheduled';
2. Get all patients treated by a specific doctorSELECT DISTINCT p.first_name, p.last_name, t.diagnosis
FROM treatments t
JOIN patients p ON t.patient_id = p.patient_id
WHERE t.doctor_id = 1;
3. Billing summary
SELECT p.first_name, p.last_name, SUM(b.amount) AS total_bill
FROM billing b
JOIN patients p ON b.patient_id = p.patient_id
GROUP BY p.patient_id;
Trigger: Auto-create billing when a treatment is added
CREATE TRIGGER after_treatment_insert
AFTER INSERT ON treatments
FOR EACH ROW
BEGIN
    INSERT INTO billing (patient_id, amount, payment_status, billing_date)
    VALUES (NEW.patient_id, 2000, 'Pending', CURDATE());
END;
â€“ Linking with Appointments
CREATE TABLE appointments (
    appointment_id INT PRIMARY KEY AUTO_INCREMENT,
    patient_id INT,
    doctor_id INT,
    appointment_date DATETIME,
    status ENUM('Scheduled', 'Completed', 'Cancelled'),
    FOREIGN KEY (patient_id) REFERENCES patients(patient_id),
    FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id)
);

